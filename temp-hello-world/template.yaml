AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  temp-hello-world

  Sample SAM Template for temp-hello-world

Globals:
  Function:
    Timeout: 3

Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        ResourcePolicy:
          CustomStatements:
            - Effect: Allow
              Principal: '*'
              Action: execute-api:Invoke
              Resource: execute-api:/*
              Condition:
                IpAddress:
                  aws:SourceIp: '13.114.22.14/32'
            - Effect: Deny
              Principal: '*'
              Action: execute-api:Invoke
              Resource: execute-api:/*
              Condition:
                NotIpAddress:
                  aws:SourceIp: '13.114.22.14/32'

  LambdaExecutionRoleWithDynamoDB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:CreateTable
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*'

  LambdaFunction1:
    Type: AWS::Serverless::Function
    DependsOn:
      - LambdaExecutionRoleWithDynamoDB
    Properties:
      CodeUri: lambda-function/
      Handler: hello.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRoleWithDynamoDB.Arn
      Events:
        HelloWorld:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /api/hello
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - controller/hello.ts

  LambdaFunction2:
    Type: AWS::Serverless::Function
    DependsOn:
      - LambdaExecutionRoleWithDynamoDB
    Properties:
      CodeUri: lambda-function/
      Handler: hello2.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRoleWithDynamoDB.Arn
      Events:
        HelloWorld:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /api/hello2
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - controller/hello2.ts

Outputs:
  HelloWorldApi:
    Description: 'API Gateway endpoint URL for Prod stage for Hello World function'
    Value: !Sub 'https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/'
  HelloWorldFunctionIamRole:
    Description: 'Implicit IAM Role created by template.yaml'
    Value: !GetAtt LambdaExecutionRoleWithDynamoDB.Arn
